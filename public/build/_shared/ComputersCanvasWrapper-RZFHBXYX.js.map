{
  "version": 3,
  "sources": ["../../../app/library/ComputersCanvasWrapper.jsx", "../../../app/library/canvas/Computers.jsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/library/ComputersCanvasWrapper.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/library/ComputersCanvasWrapper.jsx\");\n  import.meta.hot.lastModified = \"1758929848847.4124\";\n}\n// REMIX HMR END\n\nimport React from \"react\";\nimport ComputersCanvas from \"./canvas/Computers\";\nconst ComputersCanvasWrapper = React.memo(_c = () => {\n  return <ComputersCanvas />;\n});\n_c2 = ComputersCanvasWrapper;\nexport default ComputersCanvasWrapper;\n\n// app/library/ComputersCanvasWrapper.jsx\n/*  import React, { useState, useEffect } from \"react\";\n\nconst ComputersCanvasWrapper = () => {\n  const [CanvasComponent, setCanvasComponent] = useState(null);\n\n  useEffect(() => {\n    // Import dynamically on client only\n    import(\"./canvas/Computers\").then((mod) => setCanvasComponent(() => mod.default));\n  }, []);\n\n  if (!CanvasComponent) return null;\n\n  return <CanvasComponent />;\n};\n\nexport default ComputersCanvasWrapper; */\nvar _c, _c2;\n$RefreshReg$(_c, \"ComputersCanvasWrapper$React.memo\");\n$RefreshReg$(_c2, \"ComputersCanvasWrapper\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/library/canvas/Computers.jsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/library/canvas/Computers.jsx\");\n  import.meta.hot.lastModified = \"1758928937297.077\";\n}\n// REMIX HMR END\n\nimport { useEffect, useState, useRef } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls, Preload, useGLTF } from \"@react-three/drei\";\nconst Computers = ({\n  isMobile\n}) => {\n  _s();\n  const computer = useGLTF(\"/scene-transformed.glb\");\n  const groupRef = useRef();\n  return <mesh>\n      {/* Ambient light */}\n      <hemisphereLight intensity={0.35} groundColor=\"black\" />\n\n      {/* Attach lights to the group so they move/scale with the model */}\n      <group ref={groupRef} scale={isMobile ? 0.7 : 0.37} position={isMobile ? [0, -1.0, -0.5] : [0, -1.25, -0.6]} rotation={[-0.01, -0.4, -0.15]}>\n        {/* Model */}\n        {computer.scene.children.map((child, idx) => <primitive object={child} key={idx} />)}\n\n        {/* Lights relative to the model */}\n        <spotLight position={[-5, 10, 5]} angle={0.3} penumbra={1} intensity={1.5} castShadow shadow-mapSize={512} />\n        <pointLight intensity={2} position={[2, 3, 2]} />\n      </group>\n    </mesh>;\n};\n_s(Computers, \"CWICOF5msMe2f2upGV9O3Gx3YBw=\", false, function () {\n  return [useGLTF];\n});\n_c = Computers;\nconst ComputersCanvas = () => {\n  _s2();\n  const [isMobile, setIsMobile] = useState(false);\n  useEffect(() => {\n    const mediaQuery = window.matchMedia(\"(max-width: 1024px)\");\n    setIsMobile(mediaQuery.matches);\n    const handleMediaQueryChange = event => {\n      setIsMobile(event.matches);\n    };\n    mediaQuery.addEventListener(\"change\", handleMediaQueryChange);\n    return () => {\n      mediaQuery.removeEventListener(\"change\", handleMediaQueryChange);\n    };\n  }, []);\n  return <Canvas frameloop=\"demand\" style={{\n    width: \"100%\",\n    height: \"100%\"\n  }} shadows dpr={[1, 2]} camera={{\n    position: [15, 3, 5],\n    fov: 25,\n    near: 0.1,\n    far: 5000\n  }} gl={{\n    preserveDrawingBuffer: true\n  }}>\n      <OrbitControls autoRotate enableZoom={false} maxPolarAngle={Math.PI / 2} minPolarAngle={Math.PI / 2} />\n      <Computers isMobile={isMobile} />\n      <Preload all />\n    </Canvas>;\n};\n_s2(ComputersCanvas, \"0VTTNJATKABQPGLm9RVT0tKGUgU=\");\n_c2 = ComputersCanvas;\nexport default ComputersCanvas;\nvar _c, _c2;\n$RefreshReg$(_c, \"Computers\");\n$RefreshReg$(_c2, \"ComputersCanvas\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "React", "_c", "_c2"]
}
