{
  "version": 3,
  "sources": ["empty-module:@remix-run/node", "../../app/root.tsx", "../../node_modules/remix-i18next/src/react.tsx"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/root.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/root.tsx\");\n}\n// REMIX HMR END\n\nimport { Links, Meta, Outlet, Scripts, ScrollRestoration, useLoaderData } from \"@remix-run/react\";\nimport \"./tailwind.css?inline\";\nimport { json } from \"@remix-run/node\";\nimport { useTranslation } from \"react-i18next\";\nimport { useChangeLanguage } from \"remix-i18next/react\";\nimport tailwindcss from \"./tailwind.css?url\";\n//import \"./tailwind.css\";\n//import sprite from \"./library/icon/icons/icon.svg?url\";\n\nimport { useEffect } from \"react\";\nimport { Navbar } from \"~/library\";\nimport { Footer } from \"~/library\";\n\n/* import { usePosthogPageView } from \"./hooks/posthog/usePosthogPageView\";\nimport { usePosthogDistinctIdSync } from \"./hooks/posthog/usePosthogDistinctIdSync\";\nimport {\n  capturePosthogServerEvent,\n  getPosthogDistinctId,\n} from \"./.server/posthog/init.server\"; */\n\nexport async function loader({\n  request,\n  context\n}) {\n  const locale = context.locale;\n  const clientEnv = context.clientEnv;\n\n  /*   const distinctId = getPosthogDistinctId(request);\n    capturePosthogServerEvent({ event: \"server_page_view\" }, request); */\n  return json({\n    locale,\n    clientEnv\n  });\n}\nexport const links = () => [{\n  rel: \"stylesheet\",\n  href: tailwindcss\n}\n/*   {\n    rel: \"preload\",\n    href: sprite,\n    as: \"image\",\n    type: \"image/svg+xml\",\n  }, */];\nexport let handle = {\n  // In the handle export, we can add a i18n key with namespaces our route\n  // will need to load. This key can be a single string or an array of strings.\n  // TIP: In most cases, you should set this to your defaultNS from your i18n config\n  // or if you did not set one, set it to the i18next default namespace \"translation\"\n  i18n: \"common\"\n};\nexport const useClientEnv = () => {\n  _s();\n  return useLoaderData().clientEnv;\n};\n_s(useClientEnv, \"UGd6Srho9ZIz3WBO/oX8v/JIOKQ=\", false, function () {\n  return [useLoaderData];\n});\nexport default function App() {\n  _s2();\n  const {\n    locale,\n    clientEnv\n  } = useLoaderData();\n  const {\n    i18n\n  } = useTranslation();\n  useChangeLanguage(locale);\n  /*   usePosthogPageView();\n    usePosthogDistinctIdSync(); */\n  useEffect(() => {\n    if (typeof window === \"undefined\") return;\n    window.env = clientEnv;\n  }, [clientEnv]);\n  return <html lang={locale} dir={i18n.dir()}>\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Navbar />\n        <Outlet />\n        <Footer />\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>;\n}\n_s2(App, \"TaRYFGMzHTCueKornbKTDLoKRgc=\", false, function () {\n  return [useLoaderData, useTranslation, useChangeLanguage];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", null],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACuBlB,kBAAqB;;;ACtBrB,YAAuB;AA4BjB,SAAU,kBAAkB,QAAc;AAC/C,MAAI,EAAE,KAAI,IAAK,eAAc;AAC7B,EAAM,gBAAU,MAAK;AACpB,QAAI,KAAK,aAAa;AAAQ,WAAK,eAAe,MAAM;EACzD,GAAG,CAAC,QAAQ,IAAI,CAAC;AAClB;;;;;;ADJA,IAAAA,gBAA0B;AAmElB;AAhGR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,mBAAqB,EAAE;AAAA,EAChE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAAtB,IACE,MAAM,aAAa;AAErB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAc;AAChB;AAqCO,IAAM,QAAQ,MAAM;AAAA,EAAC;AAAA,IAC1B,KAAK;AAAA,IACL,MAAM;AAAA,EACR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMO;AACA,IAAI,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlB,MAAM;AACR;AACO,IAAM,eAAe,MAAM;AAChC,KAAG;AACH,SAAO,cAAc,EAAE;AACzB;AACA,GAAG,cAAc,gCAAgC,OAAO,WAAY;AAClE,SAAO,CAAC,aAAa;AACvB,CAAC;AACc,SAAR,MAAuB;AAC5B,MAAI;AACJ,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,IAAI,cAAc;AAClB,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,eAAe;AACnB,oBAAkB,MAAM;AAGxB,+BAAU,MAAM;AACd,QAAI,OAAO,WAAW;AAAa;AACnC,WAAO,MAAM;AAAA,EACf,GAAG,CAAC,SAAS,CAAC;AACd,SAAO,mDAAC,UAAK,MAAM,QAAQ,KAAK,KAAK,IAAI,GACrC;AAAA,uDAAC,UACC;AAAA,yDAAC,UAAK,SAAQ,WAAd;AAAA;AAAA;AAAA;AAAA,aAAsB;AAAA,MACtB,mDAAC,UAAK,MAAK,YAAW,SAAQ,yCAA9B;AAAA;AAAA;AAAA;AAAA,aAAoE;AAAA,MACpE,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,aAAM;AAAA,MACN,mDAAC,WAAD;AAAA;AAAA;AAAA;AAAA,aAAO;AAAA,SAJT;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IACA,mDAAC,UACC;AAAA,yDAAC,oBAAD;AAAA;AAAA;AAAA;AAAA,aAAQ;AAAA,MACR,mDAAC,YAAD;AAAA;AAAA;AAAA;AAAA,aAAQ;AAAA,MACR,mDAAC,YAAD;AAAA;AAAA;AAAA;AAAA,aAAQ;AAAA,MACR,mDAAC,uBAAD;AAAA;AAAA;AAAA;AAAA,aAAmB;AAAA,MACnB,mDAAC,aAAD;AAAA;AAAA;AAAA;AAAA,aAAS;AAAA,SALX;AAAA;AAAA;AAAA;AAAA,WAMA;AAAA,OAbG;AAAA;AAAA;AAAA;AAAA,SAcL;AACJ;AACA,IAAI,KAAK,gCAAgC,OAAO,WAAY;AAC1D,SAAO,CAAC,eAAe,gBAAgB,iBAAiB;AAC1D,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,KAAK;AAEtB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react"]
}
